package service

import (
	"github.com/aliciatay-zls/banking/domain"
	"github.com/aliciatay-zls/banking/dto"
	"github.com/aliciatay-zls/banking/errs"
	"time"
)

type AccountService interface { //service (primary port)
	CreateNewAccount(dto.NewAccountRequest) (*dto.NewAccountResponse, *errs.AppError)
}

type DefaultAccountService struct { //business/domain object
	repo domain.AccountRepository
}

func (s DefaultAccountService) CreateNewAccount(request dto.NewAccountRequest) (*dto.NewAccountResponse, *errs.AppError) { //Business Domain implements service
	if err := request.Validate(); err != nil {
		return nil, err
	}

	account := domain.Account{
		AccountId:   "", //to be generated by db later
		CustomerId:  request.CustomerId,
		OpeningDate: time.Now().Format("2006-01-02 15:04:05"), //from time.RFC3339, modified based on banking.sql
		AccountType: request.AccountType,
		Amount:      request.Amount,
		Status:      "1", //default for newly-created account
	}

	a, err := s.repo.Save(account)
	if err != nil {
		return nil, err
	}

	response := a.ToNewAccountResponseDTO()

	return &response, nil
}

func NewAccountService(repo domain.AccountRepository) DefaultAccountService {
	return DefaultAccountService{repo}
}
